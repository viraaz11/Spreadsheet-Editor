use crate::tokens::{Token, LexicalError};
use crate::ast::*;

grammar(curr_sheet: u32);


extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "int" => Token::Integer(<i32>),
    "localcell" => Token::LocalCell(<(usize, usize)>),

    "MoveUp" => Token::MoveUp,
    "MoveLeft" => Token::MoveLeft,
    "MovoDown" => Token::MoveDown,
    "MoveRight" => Token::MoveRight,
    "Quit" => Token::Quit,

    "Sum" => Token::Sum,
    "Avg" => Token::Avg,
    "Min" => Token::Min,
    "Max" => Token::Max,
    "Stdev" => Token::Stdev,
    "Sleep" => Token::Sleep,

    "EnableOut" => Token::EnableOut,
    "DisableOut" => Token::DisableOut,
    "ScrollTo" => Token::ScrollTo,

    "(" => Token::LParen,
    ")" => Token::RParen,
    "=" => Token::Assign,
    ":" => Token::Colon,
    "+" => Token::OperatorAdd,
    "-" => Token::OperatorSub,
    "*" => Token::OperatorMul,
    "/" => Token::OperatorDiv,

  }
}

pub Command: (Command, Vec<ParentType>) = {
    <c_v: DisplayCommand> => {
        let (c, v) = c_v;
        (Command::DisplayCmd(c), v)},
    <a: Addr> "=" <e_v: Expr> => {
        let (e, v) = e_v;
        (Command::AssignCmd(a, e), v)}, //Target Addr is not included in the address vector
    "Quit" => (Command::Quit, vec![]),
}

Expr: (Expr, Vec<ParentType>) = { // (1)
    <e_v1: Atom> <o: AnyOp> <f_v2: Atom> => { 
        let ((e, mut v1), (f, mut v2)) = (e_v1, f_v2);
        v1.append(&mut v2);
        (Expr::BinOp(e, o, f), v1)},
    <a_v: Atom> => { // (2)
        let (a, v) = a_v;
        (Expr::Atom(a), v)}, 
    AnyFunc
};

AnyOp: BinaryFunction = {
    "+" => BinaryFunction::Add,
    "-" => BinaryFunction::Sub,
    "*" => BinaryFunction::Mul,
    "/" => BinaryFunction::Div,
};

Atom: (AtomicExpr, Vec<ParentType>) = {
    "int" => (AtomicExpr::Integer(<>), vec![]),
    "-" <i: "int"> => (AtomicExpr::Integer(-i), vec![]),
    <a: Addr> => (AtomicExpr::Cell(a.clone()), vec![ParentType::Single(a)]),
    // <f: RangeFuncs> "(" <a1: Addr> ":" <a2: Addr> ")" => (Box::new(Expr::RangeOp{op: f, start: a1.clone(), end: a2.clone()}), vec![ParentType::Range(a1, a2)]),
    // <f: MonoFuncs> "(" <e_v: Atom> ")" => {let (e, v) = e_v; (Box::new(Expr::MonoOp(f, e)), v)},
    // "(" <Expr> ")",
};

AnyFunc: (Expr, Vec<ParentType>) = {
    <f: RangeFuncs> "(" <a1: Addr> ":" <a2: Addr> ")" => (Expr::RangeOp{op: f, start: a1.clone(), end: a2.clone()}, vec![ParentType::Range(a1, a2)]),
    <f: MonoFuncs> "(" <e_v: Atom> ")" => {let (e, v) = e_v; (Expr::MonoOp(f, e), v)},
};


Addr: Addr = {
    <cr: "localcell"> => { 
        let (col, row) = cr;
        Addr{col, row} },  //NOTE: Why am I doing Box::new everywhere?. Also, how come tokens returns Option<_> but stufff is working?!?
    // <scr: "globalcell"> => { 
    //     let (sheet, col, row) = scr;
    //     Addr{sheet: 99, col, row} },   //         Addr{sheet, col, row} },
}

RangeFuncs: RangeFunction = {
    "Sum" => RangeFunction::Sum,
    "Avg" => RangeFunction::Avg,
    "Min" => RangeFunction::Min,
    "Max" => RangeFunction::Max,
    "Stdev" => RangeFunction::Stdev,
}

MonoFuncs: MonoFunction = {
    "Sleep" => MonoFunction::Sleep,
}

DisplayCommand: (DisplayCommand, Vec<ParentType>) = {
    "EnableOut" => (DisplayCommand::EnableOut, vec![]),
    "DisableOut" => (DisplayCommand::DisableOut, vec![]),
    "ScrollTo" <a: Addr> => (DisplayCommand::ScrollTo(a.clone()), vec![ParentType::Single(a)]), // NOTE: This means that scroll_toA45 will also work (space is not enforced) ("scroll_to    AAA3" will(should?) also work, vec![]))
    "MoveUp" => (DisplayCommand::MoveUp, vec![]),
    "MoveLeft" => (DisplayCommand::MoveLeft, vec![]),
    "MovoDown" => (DisplayCommand::MoveDown, vec![]),
    "MoveRight" => (DisplayCommand::MoveRight, vec![]),
} 

